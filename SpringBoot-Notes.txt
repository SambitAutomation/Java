1. What is Spring Boot, and how does It differ from the Spring Framework?
Ans:- SpringBoot( module of Spring framework ) provides embedded servers( Tomcat , Jetty )
      It provides quick app development & make RESTful APIs in minimal time
      It also gives us Auto-Configuration feature.
      Dependency resolution( Avoid Version Conflict ) -> It just rely on the parent version(<parent>)
      Provides production ready features like health check & metrics ( by using actuators )
      Avoid additional configurations ( like datasource, session management, hibernate properties, transactional management, dispatcher servlet & also base package scanning for bean creation )
But in Spring we need to do all the basic configuration & while deploying or developing manually we need a server to verify the development work.
Spring framework having these things :
 ( Dependency Injection{IoC}, Aspect Oriented Programming, Model View Controller{MVC}, Data Access{ JDBC , ORM }, Transaction Management & Spring Security )


2. Can you explain the concept Of "auto-configuration" in Spring Boot?
Ans:- After adding dependency under pom.xlm file, maven we download all the required JAR files. In that (spring-boot-autoconfigure-2.5.15.jar) it provide all the auto-configuration related feature which we will get by using annotation and those auto-configuration will active as per some annonted conditions.
--> On this auto-configuration, it will the check positive & negative matches as per dependency addition in pom file.


3. What are Spring Boot starters?
Ans:-  
  a.spring-boot-starter-web
  b.spring-boot-starter-data-jpa
  c.spring-boot-starter-security
  d.spring-boot-starter-test
  e.spring-boot-starter-batch
  f.spring-boot-starter-actuator
  g.spring-boot-starter-amqp(Advanced Message Queuing Protocol)


4. How does Spring Boot manage application properties and configuration?
Ans:- Let's say, we have 3 application.properties file i.e. [ application.properties , application-dev.properties , application-prod.properties ]
      While working on the development environment, we can set the configuration "dev" by adding this configuration under
      application.properties file which is " spring.profiles.active=dev " and whatever we have written under application.properties file that will also come in use along with
      application-dev.properties .
Like this we set profiles configuration as per our requirement.


5. What is the role of the @SpringBootApplication annotation?
Ans:- It contains 3 main annotations i.e. @Configuration ,  @EnableAutoConfiguration , @ComponentScan
@ComponentScan => It is used to scan the current package where main method available & create the annonted bean under IoC container
@EnableAutoConfiguration => It provided automatic configurations which dependencies are added under pom.xml file
@Configuration => To create bean under the class we use it.


6. How does Spring Boot support building RESTful web services?
Ans:  By using @RestController annontation we can create RestFul web servcies where  we use many annotatin like @GetMapping ,  @PostMapping , @PutMapping , @DeleteMapping
      for required method.


7. Can you describe the use Of @Entity, @Repository, and @Service annotations in Spring Boot?
Ans:-
@Entity is used to define persistent objects that map to database tables.
@Repository marks classes that interact with the database, typically using Spring Data or JPA.
@Service defines the service layer where business logic is implemented, and it's used to keep the application organized and maintainable.


8. What is Spring Boot Actuator, and how is it useful?
Ans :- Spring Boot Actuator is a powerful tool that simplifies monitoring, managing, and maintaining Spring Boot applications in production. With built-in health checks, metrics, and customizable endpoints, it enables easy diagnostics, performance tuning, and helps ensure that your application stays healthy over time. It integrates seamlessly with external monitoring systems, making it a vital component for production-grade Spring Boot applications.


9. How can you customize the default behavior Of Spring Boot auto-configuration?
Ans:- We can customize it in multiple ways
     a. @SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})  OR    @EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class})
        In this by default datasource auto-configuration will be disabled & we can do our own datasource configuration.

     b. We can change the default server port by changing it in from application.properties file "server.port=9090"
	
     c.@ConditionalOnClass, @ConditionalOnMissingBean, @ConditionalOnBean, etc. These annotations allow you to apply your configuration only if certain conditions are met.

10. What are Spring Boot profiles, and how are they used?
Ans:- Spring Boot profiles allow you to define different configurations for different environments (e.g., development, testing, production). 
      as per our requirement, we can enable the profiles by using this "spring.profiles.active=dev".

11.How to run SpringBoot App from terminal ?
Ans:- We can use this command to run the SpringBoot Application i.e "mvn spring-boot:run"

12.How can we include outside packages while running SpringBoot App ?
Ans:- @SpringBootApplication(scanBasePackages = {"com.test.*", "com.test2"})
      @ComponentScan(basePackages = "com.test2")

13.If we don't use @SpringBootApplication annontation, will App works only by using @EnableAutoConfiguration , @ComponentScan , @Configuration ?
Ans:- Yes, it's possible by using 3 annontation
     1. @EnableAutoConfiguration ( For enabling scanning the pom.xml file dependencies & download the required JAR files )
     2. @ComponentScan(basePackages = {"com.test.*", "com.test2"})
     3. @Import({SecurityConfig.class}) => ( For including @Configuration annoted classes

14.How can we exclude auto-configuration ?
Ans:- @SpringBootApplication(exclude = {DataSourceAutoConfiguration.class , AopAutoConfiguration.class})
      we can also exclude by using application.properties class
	spring.autoconfigure.exclude=provide here fully qualified class name which want to exlcude
15.How Spring boot run() method works internally ?
Ans:- Create ApplicationContext
      Register bean into context
      Kicked up embedded tomcat container to run your jar/war

16.What is Command line runner in spring boot ?
Ans:- SpringBoot provides a interface with name "CommandLineRunner" which having run(String... args) method...
      This will after main method run() starts.We can write application logic which we want to run at the application starts.


17. Can you explain the purpose of Stereotype annotations in the Spring Framework ?
Ans:- List of stereotype annotations are
	@RestController ( web expose for api calls )
	@Controller
	@Service( Contains Business Logic)
	@Repository( Contains Dao / DB connection )

	@Component
All these above annotation, for the representation purpose to define what that specific class is doing


18. How can you define bean in spring framework ?
Ans:-If we annonated any class as @Configuration, then under that we can create bean for any class.

19. What is dependency injection ?
Ans:- It is a design pattern which is used to achieve loose coupling between classes by removing direct dependency between them.

20. How many ways we can perform dependency injection in spring or spring boot ?
Ans:- 3 ways
//Field level DI
@Autowired
private OrderRepository orderRepository;

// Setter DI
@Autowired
public void set0rderRepository(OrderRepository orderRepository) {
this.orderRepository = orderRepository;
}

//Constructor DI
@Autowired
public OrderService(OrderRepository orderRepository) {
this.orderRepository = orderRepository;
}


21. where you would choose to use setter injection over constructor injection, and viceversa?
Ans:-
CASE-1 => If in a class we have injected another class as dependency injection and that dependent class method we are using in our current class then constructor injection is mandatory
	  otherwise we can go for setter injection

CASE-2 => Constructor injection is immutable in nature but setter injection is not. If we have used constructor injection then, we can't modify the objection after the dependent class
	  created its object. But in setter injection we can modify it to some other.

CASE-3 => If we have circular dependency then we should go for setter injection 

22. Can you provide an example of a real-world use case where @PostConstruct is particularly useful?
Ans:- If we want to do any "Connection pool logic", "data shedding", "Kafka Logic" we can put under @PostConstruct.

	@PostConstruct
	public void initLogic{
	System.out.println("PostConstruct logic");
		//connection pool logic
		//kafka producer/consumer instantiate
		//data shedding
	}


23. How can we dynamically load values in a Spring Boot application?
Ans: 
2 ways
a.
@Value(${discount.price})
private int discountprice;

b.
private Environment env;
env.getProperty("discount.price");

23. If I will configure same values in both properties then which value will be load in spring boot OR Who will load first properties or yml file ?
Ans:- application.properties file will load first then application.yml file.
	we have 2 class file like : PropertiesPropertySourceLoader & YamlPropertySourceLoader.


24. How to load External Properties in Spring Boot ?
Ans:- By using this we can in application.properties file (spring.config.import)
	spring.config.import=file://Users//test.properties


25. How to map or bind config properties to java Object ?
Ans:- we can do it  by creating a Java class file which would be annonted with @Configuration.

26. How will you resolve bean dependency ambiguity ?
Ans:- For a interface if we have two implementation classes, then on that we can get bean/dependency ambiguity issue.
      So by using @Qualifier --> this is byType, we can avoid this issue.
      On which we class we are doing dependency injection we can user this :
      @Qualifier("bean/class Name in camel case")



27. Can we avoid this dependency ambiguity without using @Qualifier ?
Ans:- Yes, by using @Resource we can avoid dependency ambiguity.
	Syntax :- @Resource(name = "bean/class Name in camel case")

28. What is bean scope & Can you explain different type of bean scope ?

singleton --> It will create only a single object instance in ApplicationContext. If we requested to Spring Ioc container, it will get it from in memory.

prototype --> It will create multiple object instance in ApplicationContext as many times we request for that bean.

request --> It creates a new instance of the bean for each HTTP request. After processing the request, the bean instance is typically discarded.
		@Scope(value WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS)
 
Session --> It creates a single instance of the bean per user session. The instance persists throughout the user's session and is typically discarded when the session ends.
		@Scope(value= WebApplicationContext.SCOPE_SESSION, proxyMode= ScopedProxyMode.TARGET_CLASS)

Application --> The application scope is used in web-based Spring Boot applications to create a single instance of the bean for the entire web application context.

WebSocket --> It creates a single instance of the bean per WebSocket session.


29. How to clear session as per requirement?
Ans:- BY using below in application.properties file we can set the session age timings.
server.session.cookie.max-age= 1
server.session.timeout= 1

30. How to define custom bean scope ?
Ans:- We can create custom bean scope by implementing "Scope" interface.

--> Scope interface implemented by the class which we want to make it as custom bean
package com.javatechie.scope;
import org.springframework.beans.factory.ObjectFactory;
import org.springframework.beans.factory.config.Scope;
import java.util.HashMap;
import java.util.Map;

public class CustomThreadScope implements Scope {
    CustomThreadLocal customThreadLocal = new CustomThreadLocal();

    @Override
    public Object get(String str, ObjectFactory<?> objectFactory) {
        System.out.println("Fetched object from scope");

        @SuppressWarnings("unchecked")
        Map<String, Object> scope = (Map<String, Object>) customThreadLocal.get();
        Object object = scope.get(str);
        if (object == null) {
            object = objectFactory.getObject();
            scope.put(str, object);
        }

        return object;
    }

    @Override
    public Object remove(String name) {
        Map<String, Object> scope = (Map<String, Object>) customThreadLocal.get();
        return scope.remove(name);
    }

    @Override
    public void registerDestructionCallback(String name, Runnable callback) {

    }

    @Override
    public Object resolveContextualObject(String key) {
        return null;
    }

    @Override
    public String getConversationId() {
        return null;
    }

    class CustomThreadLocal extends ThreadLocal {
        protected Map<String, Object> initialValue() {
            System.out.println("Initializing ThreadLocal");
            return new HashMap<String, Object>();
        }
    }
}

-->Now we need to register scope under Application context.
	ConfigurableApplicationContext context = SpringApplication.run(SprinBootApp.class, args);
	 Scope scope = new CustomThreadScope();
        context.getBeanFactory().registerScope("threadScope", scope);

-->Now we can use it for any class
	@Component
	@Scope("threadScope")
	public class Volunteer {}

--> In main class, we can verify how for every thread it will create new object instance.
	Runnable childThread = () -> {
             Volunteer v1 = context.getBean(Volunteer.class);
             Volunteer v2 = context.getBean(Volunteer.class);
             System.out.println("Hashcode of two object created by child thread " + v1.hashCode() + " & " + v2.hashCode());
         };
         new Thread(childThread).start();
  
       //   This code will be executed by main thread
         Volunteer v1 = context.getBean(Volunteer.class);
         Volunteer v2 = context.getBean(Volunteer.class);
         System.out.println("Hashcode of two object created by main thread " + v1.hashCode() + " & " + v2.hashCode());
  

31. Can you provide a few real-time use cases for when to choose Singleton scope and Prototype scope ?
Ans:- singletone scope : Database Configuration, service layer, Application Configuration .
Prototype Scope : User Session, Thread safety ,Heavy initialization .

32. can we inject prototype bean in singleton bean ? if yes what will happen if we inject prototype bean in singleton bean ?
Ans: Yes we can inject but that prototype bean behave as a singleton bean ( it will loose it's scope )
     If we want to achieve prototype behaviour then we can go thourgh by @Lookup & ObjectFactory way.
ex:- Here ProtoTypeBean class is a prototype scope.
package com.javatechie.scope;

import org.springframework.beans.factory.ObjectFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Lookup;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Component;

@Component
public class SingletonBean {

    @Autowired
    private ObjectFactory<ProtoTypeBean> protoTypeBeanObjectFactory;

    public SingletonBean() {
        System.out.println("SingletonBean() instantiated !!");
    }

    public ProtoTypeBean getProtoTypeBean() {
        return getInstance();
    }

    @Lookup
    public ProtoTypeBean getInstance(){
        return null;
    }


}


33. What is the difference between spring singleton and plain singleton ?
Ans: Spring singleton scope is upto its Application context. For an single Application context it will be single only.
     Plain singleton scope is upto JVM based. For the JVM environment, it will single. 

34 . What is the purpose of the BeanPostProcessor interface in Spring, and how can you use it to customize bean initialization and destruction?
Ans: The purpose of the BeanPostProcessor interface in Spring is to do any king of validation before initializaling a bean or destructing a bean.
     Here the example, for User class bean, before creating bean it will validate the password.


--> User class created under @Configuration like this below
 @Bean
    public User user() {
        User user = new User();
        user.setUsername("john");
        user.setPassword("t27t"); 
        return user;
    }

--> Here the implementation of BeanPostProcessor interface for customizing bean
import com.javatechie.common.User;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.stereotype.Component;

@Component
public class PasswordValidationBeanPostProcessor implements BeanPostProcessor {

   @Override
   public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
       if (bean instanceof User user) {
           if (!isValidPassword(user.getPassword())) {
               throw new IllegalArgumentException("Invalid password for user: " + user.getUsername());
           }
       }
       return bean;
   }

   @Override
   public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
       return bean;
   }

   private boolean isValidPassword(String password) {
       // Implement your password validation logic here
       // For example, check length, special characters, etc.
       return password.length() >= 8 && password.matches(".*[@#$%!].*");
   }
}


35. Have you worked on Restful webservices ? If yes What all HTTP methods have you used in your project ?
Ans:-
• POST (CREATE)
• PUT (UPDATE)
• GET (RETRIVE)
• PATCH (PARTIAL UPDATE)
• DELETE (REMOVE)

36.How can you specify the HTTP method type for your REST endpoint?
Ans:-
@GetMapping
@PostMapping
@PutMapping
@PatchMapping
@DeleteMapping

37. Scenario : Can you design a rest endpoint , Assume that you have a Product database, and your task is to create an API to filter a list of products by productType.
Ans: By using @GetMapping("/searchProduct/{type}"), we can get List of products.


38. Scenario : Design endpoints in a way that takes "productType" as input. If the user provides this input, the endpoint should filter products based on the specified condition. If
"productType" is not provided, the endpoint should return all the products?
Ans:- We can use @RequestParam to do this activity.
ex:- 
@GetMapping("/filter")
	public ResponseEntity<?> filterProduct(@RequestParam(value = "type", required = false, defaultValue = "Electronics") String type){
		return ResponseEntity.ok(service.findProductByType(type).size() == 0 ? service.getAllProduct() : service.findProductByType(type));
	}


39. What is the difference between @PathVariable & @RequestParam ?
Ans:- In the of @PathVariable we don't pass it in the URL, we will get 404 error . but in the case of @RequestParam it will provide us the result if required = false


40. Why did you use @RestController why not @Controller ?
Ans:- In @Controller annotation, we need provide a "modelAndView" to display the required data.
	But we can achieve it whatever ew are returing for that end point method like @RestController by using @ResponseBody.


41. How can we deserialize a JSON request payload into an object within a Spring MVC controller ?
Ans:- By using @RequestBody we can deserialize a JSON request payload into an object.

42. Can we perform update operation in POST http method if yes then why do we need Put Mapping or put http method?
Ans:- We can do update operation by using POST http method. But it's not recommended to do. Because it's not idempotent.
	idempotent --> If the http method is not creating any new resources or record then it's idempotent.
	As POST method is meant for to create new resource in DB it's not idempotent.

43. Can we pass Request Body in GET HTTP Method ?
Ans: Yes, we can pass. But it's not a recommendable practice for GET HTTP Method. Get method meant to retrieve the data.

44. How can we perform content negotiation (XML/JSON) in Rest endpoint ?
Ans:- We can use produces under HTTP method to get desired format output.
      @GetMapping(produces = {"application/json" , "application/xml"})
For this we add "jackson-dataformat-xml" dependency in pom.xml file.


45. What all status code you have observed in your application ?
Ans:-
400 ( Bad Request )
404 ( Data Not Found )
401 ( Auth Error )
403 ( Authorization error )
405 ( Method not allowed )
415 ( Unsupported Media Type )
500 ( Internal Server )
502 ( Bad Gateway )
200 ( OK --> Success )
201 ( Created )

46. How can you customize the status code for your endpoint ?
Ans:- By using "@ResponseStatus" annotation, we can define desired status code. If any problem occurs, it will provide internal server error.
	This need to put after any method mapping.
ex:- @ResponseStatus(HttpStatus.CREATED)

47. How can you enable cross origin ?
Ans:- we can use "@CrossOrigin" in the controller which endpoints we want to provide access.
	@CrossOrigin(origins ="http://localhost:4000")
We can use also Java Config based cross origin enablement.

EX:
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
@EnableWebMvc
public class CorsConfig implements WebMvcConfigurer {

  @Override
  public void addCorsMappings(CorsRegistry registry) {
      registry.addMapping("/api/**")
              .allowedOrigins("*") // Add your front-end application's origin
              .allowedMethods("GET", "POST", "PUT", "DELETE")
              .allowedHeaders("Origin", "Content-Type", "Accept", "Authorization")
              .allowCredentials(true)
              .maxAge(3600);
  }
}	


48. How can you upload a file in spring ?
Ans:- we can use "MultipartFile" ( import org.springframework.web.multipart.MultipartFile ) to upload any file which has been provided by Spring.

49. How do you maintain versioning for your REST API?
Ans:- By using in the Mapping url , @RequestParam & @RequestBody we can do it.
-->@PostMapping("/v1/bookNow")
-->@PostMapping("/v2/bookNow")
--> @RequestParam(name = "version") int version
--> @RequestHeader(name = "Api-Version") int version

50. How will you document your rest API ?
Ans:- By using OpenAPI dependency in pom file, we can prepare our documentation
 dependency -->  springdoc-openapi-starter-webmvc-ui
 URL --> http://localhost:1010/swagger-ui/index.html
 For only API endpoints --> http://localhost:1010/v3/api-docs

51. How can you hide certain REST endpoints to prevent them from being exposed externally?
Ans:- By using "@Hidden" we can disable any api endpoint to be exposed to in any API document.

52. How will you consume restful API ?
Ans:-
RestTemplate
FeignClient
WebClient
Advance Rest Client

Ex:- Create a bean under Configuration class for RestTemplate.
@GetMapping("/consumeData")
	public List<UserResponse> fetchOuterData() {
		return restTemplate.getForObject("https://jsonplaceholder.typicode.com/users", List.class);
	}

53. How will you handle exceptions in your project?
Ans: By creating custom exception handling, we can handle our exceptions;
Ex:-
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class ProductExceptionHandler {

	@ExceptionHandler(ProductException.class)
	public ErrorDTO handleProductException(ProductException exception) {
		return new ErrorDTO("FAILED", "404", HttpStatus.NOT_FOUND);
	}
	
}

In Spring V3 -->  ProblemDetail Class we can provide our custom exception handling process.


54. How can you avoid defining handlers for multiple exceptions, or what is the best practice for handling exceptions ?
Ans: We can create a single exception class where  we can display the exception message.
	If in a handler method any exception occurs then then in the try-catch  we can handle it & that exception class will provide us the message about specific exception.


55. How will you validate or sanitize your input payload and How can you populate validation error message to the end users ?
Ans: We can use "spring-starter-validation" dependency for this.
	So for which entity / bean we want to put the validation for the properties, we can set the validations.
Ex:-
public class Product {
    @NotNull(message = "id shouldn't be null")
    @NotEmpty(message = "id shouldn't be empty")
    private String id;
    @NotBlank(message = "name shouldn't be null or empty")
    private String name;
    @Min(value = 499,message = "price shouldn't be less than 499")
    @Max(value = 100000,message = "price shouldn't be exceed more than 100000")
    private double price;
    @NotBlank(message = "model shouldn't be null or empty")
//    @Pattern(regexp = "[A-Za-z0-9]+")
    private String model;
    @NotBlank(message = "productType shouldn't be null or empty")
    @ValidateProductType
    private String productType;

//    @Email
//    private String emailId;
//
//    @AssertFalse
//    @AssertTrue
//    private boolean isActive;
//
//    @Future
//    @Past
//    private Date birthDate;

}

After that in the API end point, we need to put @Valid to do teh validations.

    @PostMapping
    public List<Product> saveProduct(@RequestBody @Valid Product product){
        return service.saveProduct(product);
    }

Then we need to get the the exception( MethodArgumentNotValidException ) & in the response it will show the end-user if any validate issue comes.

@ExceptionHandler(MethodArgumentNotValidException.class)
    public Map<String, String> handleMethodArgumentNotValidException(MethodArgumentNotValidException ex) {
        Map<String, String> errorMap = new HashMap<>();
        ex.getBindingResult().getFieldErrors()
                .forEach(error -> {
                    errorMap.put(error.getField(), error.getDefaultMessage());
                });
        return errorMap;
    }	


56. How can you define custom bean validation ?
Ans: By implementing "ConstraintValidator" interface we can craete our own validation.
--> Creat own validation annontation

import jakarta.validation.Constraint;
import jakarta.validation.Payload;

import java.lang.annotation.*;

@Target({ElementType.FIELD,ElementType.PARAMETER})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Constraint(validatedBy = ProductTypeValidator.class)
public @interface ValidateProductType {

    public String message() default "Invalid productType: It should be either Electronics OR Education OR Baby&Kids";

    Class<?>[] groups() default {};

    Class<? extends Payload>[] payload() default {};
}

-->Implement ProductTypeValidator interface for required validation

import jakarta.validation.ConstraintValidator;
import jakarta.validation.ConstraintValidatorContext;

import java.util.Arrays;
import java.util.List;

public class ProductTypeValidator implements ConstraintValidator<ValidateProductType, String> {
    @Override
    public boolean isValid(String productType, ConstraintValidatorContext constraintValidatorContext) {
        List<String> productTypes = Arrays.asList("Electronics", "Education","Baby&Kids");
        return productTypes.contains(productType);
    }
}

57. use case : let's say you find a bug in production environment and now you want to debug that scenario ,How can you do that from your local ? 
Ans: By using "spring.profiles.active" we can set the environment and replicate the bug.


58. How can you enable a specific environment without using profiles? OR what is the alternative to profiles to achieving same use case ?
Ans: In application.properties we can set a property like "app.active.env=prod"
In the creation of bean, we can define under the @Configuration.
	@Bean
    @ConditionalOnProperty(prefix = "app.active",name = "env",havingValue = "dev")
    public KafkaProps devKafkaProps() {
        KafkaProps props = new KafkaProps("2.237.64.90:8181", 8181, "dev-user-topic");
        System.out.println("kafka dev bean initialized !");
        return props;
    }


59. What is the difference between @Profile & Conditional ?
Ans: In the case of @Profile --> we only set a specific environment to pick up the configuration.
	 In the case of Conditional --> We will be having mutiple options to set up the bean. 
	 Like :-
	 @ConditionalOnBean
	 @ConditionalOnClass
	 @ConditionalOnCloudPlatform

60. What is AOP ?
Ans: AOP --> Aspect Oriented Programming


61. What is pointcut & join Points in AOP ?
Ans:


62. What are different type of advice ?
Before Advice
After Advice
After Returning Advice
After Throwing Advice
Around Advice


63. use case - can I use AOP to evaluate performance of a method or is this possible to design a logging framework to capture request and response body of a method ?
ans: By using @Around we can get the body & log.
	 @Around("@annotation(com.javatechie.annotation.TrackExecutionTime)")
	 

64. How does your application interact with the database and which frameworks are you using?
Ans: By providing some configuration in application.properties file we can interact with database.

#DATASOURCE PROPERTIES
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url = jdbc:mysql://localhost:3306/DBName
spring.datasource.username = root
spring.datasource.password = Password

#JPA SPECIFIC PROPERTIES
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto = update
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


65. Why is it important to configure a physical naming strategy?
Ans: If we want to keep same property name which we have defined under Entity class that would be created under table coulmn name we need to provide physical naming strategy
	 under application.properties file.

spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

66. What are the key benefits of using Spring Data JPA ?
Ans: By using Spring Data JPA, we will get ready-made methods to retrieve data from database & it provides us many more methods to do DB operations.


67. What are the differences between Hibernate, JPA, and Spring Data JPA?
Ans:
Hibernate :- ORM(Object Relational Mapping) Tool , To do the tabel mapping , caching & Transactions
JPA :- Specifications , API , methods
Spring Data JPA :- Abstaction layer over JPA, provides utilities methods( CRUD )

68. How can you connect multiple databases or data sources in a single application?	 
Ans: we can connect mutiple datasource by using some java based configuration & adding datasource configuration in application.properties file.

#EMPLOYEE DATASOURCE PROPERTIES
spring.datasource.employee.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.employee.url = jdbc:mysql://localhost:3306/javatechie_ds1
spring.datasource.employee.username = root
spring.datasource.employee.password = Password

#DEPARTMENT DATASOURCE PROPERTIES
spring.datasource.department.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.department.url = jdbc:mysql://localhost:3306/javatechie_ds2
spring.datasource.department.username = root
spring.datasource.department.password = Password

#JPA SPECIFIC PROPERTIES
spring.jpa.show-sql = true
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


69. What are the different ways to define custom queries in Spring Data JPA ?
Ans:
1. method syntax
2. QUERY (JPQL)
3. SQL 

   / @Query(value = "SELECT e from Employee e WHERE e.salary > :salary")  \
   \ List<Employee> findEmployeeWithJPQL(@Param("salary") double salary); /

   / @Query(value = "SELECT * from Employee where salary >?1",nativeQuery = true) \
   \ List<Employee> findEmployeeWithSQL( double salary);                          /

-->  List<Employee> findBySalaryGreaterThan(double salary);


70. Can you provide example to find results based on some range
Ex 1 : Find list of employees whose age in between 30 lakh to 35 lakh
Ans:  List<Employee> findByAgeBetween(int min, int max);

Ex 2 : find avg salary of employees in an organization
Ans: 
 @Query(value = "SELECT AVG(e.salary) FROM Employee e")
    Optional<Double> avgSalary();

71. How will you define entity relationships or association mapping in Spring Data JPA?
(Use Case: Consider an e-commerce application where each customer can have multiple
orders. Here, a Customer entity can be associated with multiple Order entities.)
Ans: BY establishing @OneToMany & @ManyTOOne relationships between entities

72. Is this possible to execute Join query in Spring Data JPA ? If yes, how can you add some insights ?
Ans: Yes, we can do Join in Spring Data JPA.
    //join query
    @Query(value = "SELECT c.name , COUNT(o) FROM Customer c JOIN c.orders o GROUP BY c.id")
    List<Object[]> findCustomerOrderCount();

    @Query(value = "SELECT  NEW com.javatechie.common.CustomerOrderDTO(c.name , COUNT(o), SUM(o.price)) FROM Customer c JOIN c.orders o GROUP BY c.id")
    List<CustomerOrderDTO> findCustomerOrderCountResponse();


73. How will you implement pagination & Sorting in Spring Data JPA ?
Ans:
Ex:

	public List<Employee> findEmployeesWithSorting(String field){
        return  repository.findAll(Sort.by(Sort.Direction.ASC,field));
    }

    public Page<Employee> findEmployeesWithPagination(int pageNumber,int pageSize){
        return  repository.findAll(PageRequest.of(pageNumber, pageSize));
        //1000
        //pageSize : 1-100, 101-200 , 201-300
        //offset : 0,1,2,3,4,
        //20
        // pageSize=5 / 10 (0,1)
        //pageNumber : 0 (0-5) , 1 (6-10) , 2 (11-15) , 3 (16-20)
    }


    public Page<Employee> findEmployeesWithPaginationAndSorting(int pageNumber, int pageSize, String field){
        return repository.findAll(PageRequest.of(pageNumber, pageSize).withSort(Sort.by(field)));
    }








